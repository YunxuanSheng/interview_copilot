generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_POSTGRES_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  password            String?
  name                String?
  image               String?
  phone               String?
  location            String?
  summary             String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  accounts            Account[]
  educations          Education[]
  interviewSchedules  InterviewSchedule[]
  jobApplications     JobApplication[]
  personalExperiences PersonalExperience[]
  projects            Project[]
  sessions            Session[]
  skills              Skill[]
  workExperiences     WorkExperience[]

  @@map("users")
}

model Education {
  id          String    @id @default(cuid())
  userId      String
  school      String
  degree      String
  major       String?
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("educations")
}

model WorkExperience {
  id           String    @id @default(cuid())
  userId       String
  company      String
  position     String
  startDate    DateTime
  endDate      DateTime?
  description  String?
  achievements String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("work_experiences")
}

model Skill {
  id        String   @id @default(cuid())
  userId    String
  name      String
  level     String
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("skills")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model InterviewSchedule {
  id               String            @id @default(cuid())
  userId           String
  company          String
  position         String
  department       String?
  interviewDate    DateTime
  interviewLink    String?
  round            Int               @default(1)
  tags             String?
  notes            String?
  status           String            @default("scheduled")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  jobApplicationId String?
  interviewRecords InterviewRecord[]
  jobApplication   JobApplication?   @relation(fields: [jobApplicationId], references: [id])
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("interview_schedules")
}

model InterviewRecord {
  id            String              @id @default(cuid())
  scheduleId    String
  audioFilePath String?
  transcript    String?
  aiAnalysis    String?
  overallScore  Int?
  feedback      String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  questions     InterviewQuestion[]
  schedule      InterviewSchedule   @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@map("interview_records")
}

model InterviewQuestion {
  id                String          @id @default(cuid())
  recordId          String
  questionText      String
  userAnswer        String?
  aiEvaluation      String?
  score             Int?
  questionType      String?
  createdAt         DateTime        @default(now())
  recommendedAnswer String?
  record            InterviewRecord @relation(fields: [recordId], references: [id], onDelete: Cascade)

  @@map("interview_questions")
}

model PersonalExperience {
  id           String   @id @default(cuid())
  userId       String
  company      String
  questionType String
  questionText String
  answerText   String?
  difficulty   String?
  tags         String?
  clusterId    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("personal_experiences")
}

model Project {
  id          String            @id @default(cuid())
  userId      String
  name        String
  role        String
  company     String?
  department  String?
  workType    String?
  description String
  timeRange   String?
  techStack   String?
  status      String            @default("active")
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  cards       ProjectCard[]
  documents   ProjectDocument[]
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model ProjectCard {
  id           String   @id @default(cuid())
  projectId    String
  category     String
  question     String
  answer       String?
  aiSuggestion String?
  status       String   @default("draft")
  tags         String?
  priority     Int      @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_cards")
}

model ProjectDocument {
  id         String   @id @default(cuid())
  projectId  String
  fileName   String
  fileType   String
  fileUrl    String
  content    String?
  parseDepth String   @default("medium")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_documents")
}

model JobApplication {
  id             String              @id @default(cuid())
  userId         String
  companyName    String
  positionName   String
  department     String?
  status         String              @default("已投递")
  priority       String              @default("medium")
  appliedDate    DateTime            @default(now())
  jobUrl         String?
  jobDescription String?
  isReferral     Boolean             @default(false)
  referrerName   String?
  salary         String?
  location       String?
  notes          String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  schedules      InterviewSchedule[]
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("job_applications")
}
