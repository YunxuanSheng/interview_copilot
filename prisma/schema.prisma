// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  phone     String?
  location  String?
  summary   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  interviewSchedules InterviewSchedule[]
  personalExperiences PersonalExperience[]
  accounts          Account[]
  sessions          Session[]
  educations        Education[]
  workExperiences   WorkExperience[]
  skills           Skill[]
  projects         Project[]

  @@map("users")
}

model Education {
  id          String   @id @default(cuid())
  userId      String
  school      String
  degree      String
  major       String?
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("educations")
}

model WorkExperience {
  id          String   @id @default(cuid())
  userId      String
  company     String
  position    String
  startDate   DateTime
  endDate     DateTime?
  description String?
  achievements String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("work_experiences")
}

model Skill {
  id        String   @id @default(cuid())
  userId    String
  name      String
  level     String   // beginner, intermediate, advanced, expert
  category  String   // technical, language, soft_skill, etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("skills")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model InterviewSchedule {
  id             String   @id @default(cuid())
  userId         String
  company        String
  position       String
  department     String?
  interviewDate  DateTime
  interviewLink  String?
  round          Int      @default(1)
  tags           String?
  notes          String?
  status         String   @default("scheduled") // scheduled, completed, cancelled
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  interviewRecords InterviewRecord[]

  @@map("interview_schedules")
}

model InterviewRecord {
  id             String   @id @default(cuid())
  scheduleId     String
  audioFilePath  String?
  transcript     String?
  aiAnalysis     String?
  overallScore   Int?
  feedback       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  schedule       InterviewSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  questions      InterviewQuestion[]

  @@map("interview_records")
}

model InterviewQuestion {
  id             String   @id @default(cuid())
  recordId       String
  questionText   String
  userAnswer     String?
  aiEvaluation   String?
  score          Int?
  questionType   String?  // algorithm, system_design, behavioral, etc.
  createdAt      DateTime @default(now())

  // Relations
  record         InterviewRecord @relation(fields: [recordId], references: [id], onDelete: Cascade)

  @@map("interview_questions")
}

model PersonalExperience {
  id           String   @id @default(cuid())
  userId       String
  company      String
  questionType String
  questionText String
  answerText   String?
  difficulty   String?  // easy, medium, hard
  tags         String?  // 手动添加的标签，逗号分隔
  clusterId    String?  // 相似问题聚类ID
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("personal_experiences")
}

model Project {
  id          String   @id @default(cuid())
  userId      String
  name        String
  role        String   // 扮演角色：前端、产品、测试、算法、运维等
  description String   // 项目简介
  timeRange   String?  // 所属时间段
  techStack   String?  // 关键技术栈，逗号分隔
  status      String   @default("active") // active, archived
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  cards       ProjectCard[]
  documents   ProjectDocument[]

  @@map("projects")
}

model ProjectCard {
  id          String   @id @default(cuid())
  projectId   String
  category    String   // 角度分类：项目背景、职责拆解、难点挑战、技术实现、协作沟通、反思与优化
  question    String   // 问题内容
  answer      String?  // 用户回答
  aiSuggestion String? // AI建议（从哪里找信息）
  status      String   @default("draft") // draft, answered, completed
  tags        String?  // 标签，逗号分隔
  priority    Int      @default(1) // 优先级 1-5
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_cards")
}

model ProjectDocument {
  id          String   @id @default(cuid())
  projectId   String
  fileName    String
  fileType    String   // pdf, docx, md, txt
  fileUrl     String   // 文件存储URL
  content     String?  // 解析后的文本内容
  parseDepth  String   @default("medium") // low, medium, high
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_documents")
}
